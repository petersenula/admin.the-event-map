/* eslint-disable @typescript-eslint/no-explicit-any */

'use client';

interface EventFormValues {
  title?: string;
  description?: string;
  address?: string;
  lat?: number;
  lng?: number;
  website?: string;
  type?: string[];
  start_date?: string;
  start_time?: string;
  end_date?: string;
  end_time?: string;
  age_group?: string[];
  format?: string;
  repeat?: string;
  repeat_until?: string;
  description_en?: string;
  description_de?: string;
  description_fr?: string;
  description_it?: string;
  description_ru?: string;
}

import { useEffect, useState, useRef } from 'react';
import { useForm } from 'react-hook-form';
import { supabase } from '../lib/supabase';
import GoogleMapsSearch from './googlemapsscript';
import AuthForm from './components/auth';
import { Dialog } from '@headlessui/react'; // –µ—Å–ª–∏ —Ç—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å
import ArchiveDialog from './components/ArchiveDialog';

const eventType = [
  '–∫—É–ª—å—Ç—É—Ä–∞', '–≤—ã—Å—Ç–∞–≤–∫–∞', '—Å–ø–µ–∫—Ç–∞–∫–ª—å', '–∂–∏–≤–æ–ø–∏—Å—å', '–Ω–∞—É–∫–∞',
  '—Å–ø–æ—Ä—Ç', '–ø—Ä–∏—Ä–æ–¥–∞', '–∑–¥–æ—Ä–æ–≤—å–µ', '—Ç–∞–Ω—Ü—ã',  '–º—É–∑—ã–∫–∞', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
  '–æ–±—â–µ–Ω–∏–µ', '–æ–±—É—á–µ–Ω–∏–µ', '–∫–Ω–∏–≥–∏', '–ª–µ–∫—Ü–∏—è', '–∫–≤–µ—Å—Ç', '–º–∞—Å—Ç–µ—Ä–∫–ª–∞—Å—Å',
  '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ', '–∏–≥—Ä–∞',  '–¥–µ—Ç—Å–∫–æ–µ',  '–∫–∏–Ω–æ', '—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã', '–∫–ª—É–±—ã –∏ –Ω–æ—á–Ω–∞—è –∂–∏–∑–Ω—å',  
  '—è—Ä–º–∞—Ä–∫–∞', '–µ–¥–∞', '—Ñ–µ—Å—Ç–∏–≤–∞–ª—å', '–∞–≤—Ç–æ–º–æ–±–∏–ª–∏', '—Ä–µ–ª–∏–≥–∏—è', '–¥—Ä—É–≥–æ–µ'   
];

const ageGroups = [
  '0-2', '3-5', '6-8', '9-12', '13-17', '18+', 'any'
];

const formats = [
  'any', 'children', 'adults'
];

export default function Home() {

  const [search, setSearch] = useState('');     // —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const [isSearching, setIsSearching] = useState(false); // –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–∞

  // –≥–¥–µ —Å—Ç–µ–π—Ç—ã:
  const formRef = useRef<HTMLDivElement | null>(null);

  const [archiveOpen, setArchiveOpen] = useState(false);
  const [archiveDate, setArchiveDate] = useState('');
  const [scraping, setScraping] = useState(false);

  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const firstLoadLimit = 1000;
  const loadMoreLimit = 100;

  const getSwissTime = () => {
    return new Date().toLocaleString('sv-SE', { timeZone: 'Europe/Zurich' });
  };
  // –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ -> null, –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã -> null.
  // –ò –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä–∞ ‚Äî repeat_until –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
  const normalizeForm = (raw: any) => {
    const out: any = { ...raw };

    const emptyToNull = [
      'description','address','website',
      'start_date','start_time','end_date','end_time',
      'repeat_until','format','description_en','description_de',
      'description_fr','description_it','description_ru'
    ];
    emptyToNull.forEach((k) => {
      if (out[k] === '' || out[k] === undefined) out[k] = null;
    });

    if (!Array.isArray(out.type) || out.type.length === 0) out.type = null;
    if (!Array.isArray(out.age_group) || out.age_group.length === 0) out.age_group = null;

    if (!out.repeat) out.repeat_until = null;

    return out;
  };

  const [gmapsResetKey, setGmapsResetKey] = useState(0);

  const getMarker = (value: any) => {
    if (Array.isArray(value)) return value.length > 0 ? '‚úÖ' : '‚ùå';
    if (value === null || value === undefined) return '‚ùå';
    if (typeof value === 'string') return value.trim().length ? '‚úÖ' : '‚ùå';
    return value ? '‚úÖ' : '‚ùå';
  };

  const formatDate = (iso?: string | null) => {
    if (!iso) return '';
    const [y, m, d] = iso.split('-');
    if (!y || !m || !d) return iso; // –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    return `${d}.${m}.${y}`;
  };

  const { register, handleSubmit, setValue, reset, watch } = useForm<EventFormValues>({
    defaultValues: {
      start_time: '00:00',
      end_time: '23:59',
    },
  });

  const [events, setEvents] = useState<any[]>([]);
  const [user, setUser] = useState<any>(null);
  const [editingId, setEditingId] = useState<string | null>(null);

  const fetchUser = async () => {
    const { data } = await supabase.auth.getUser();
    setUser(data.user);
  };

  const onSubmit = async (formData: any) => {
    if (!user) { alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ'); return; }

    // 1) –ø—Ä–∏–≤–æ–¥–∏–º —á–µ–∫–±–æ–∫—Å—ã –∫ –º–∞—Å—Å–∏–≤–∞–º (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if (formData.type && !Array.isArray(formData.type)) formData.type = [formData.type];
    if (formData.age_group && !Array.isArray(formData.age_group)) formData.age_group = [formData.age_group];

    // 2) –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ -> null –∏ repeat_until –ø—Ä–∏ "–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞"
    const form = normalizeForm(formData);

    let error;
    const repeatType = form.repeat; // '', 'weekly', 'monthly'
    const repeatUntil = form.repeat_until ? new Date(form.repeat_until) : null;

    const startDate = form.start_date ? new Date(form.start_date) : null;
    if (!startDate || isNaN(startDate.getTime())) {
      alert('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞');
      return;
    }

    const hasEndDate = !!form.end_date;
    const endDate = hasEndDate ? new Date(form.end_date) : null;
    const toISODate = (d: Date) => d.toISOString().slice(0, 10);

    const eventsToInsert: any[] = [];

    // –≤—ã–∫–ª—é—á–∞–µ–º "–≥—Ä—è–∑–Ω—ã–µ" –ø–æ–ª—è, —Ä–∞–±–æ—Ç–∞–µ–º —Å cleanFormData
    const { repeat, repeat_until, id, ...cleanFormData } = form;

    if (editingId) {
      if (repeatType === 'weekly' || repeatType === 'monthly') {
        await supabase.from('events').delete().eq('id', editingId);

        while (!repeatUntil || startDate <= repeatUntil) {
          const newEvent = {
            ...cleanFormData,
            start_date: toISODate(startDate),
            end_date: hasEndDate ? toISODate(endDate!) : null, // üëà –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –∫–æ–Ω–µ—Ü
            start_time: cleanFormData.start_time,
            end_time: cleanFormData.end_time,
            user_id: user?.id || null,
            user_email: user?.email || null,
            // created_at —É–±–µ—Ä–∏, –ø—É—Å—Ç—å –ë–î —Å—Ç–∞–≤–∏—Ç —Å–∞–º–∞
          };
          eventsToInsert.push(newEvent);

          // üëá –¥–≤–∏–≥–∞–µ–º –û–ë–ï –¥–∞—Ç—ã –Ω–∞ —à–∞–≥ –ø–æ–≤—Ç–æ—Ä–∞
          if (repeatType === 'weekly') {
            startDate.setDate(startDate.getDate() + 7);
            if (hasEndDate) endDate!.setDate(endDate!.getDate() + 7);
          } else if (repeatType === 'monthly') {
            startDate.setMonth(startDate.getMonth() + 1);
            if (hasEndDate) endDate!.setMonth(endDate!.getMonth() + 1);
          }
        }

        const { error: insertError } = await supabase.from('events').insert(eventsToInsert);
        error = insertError;
      } else {
        // –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –∞–ø–¥–µ–π—Ç –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
        ({ error } = await supabase.from('events')
          .update({ ...cleanFormData, user_id: user.id || null })
          .eq('id', editingId));
      }
    } else {
      while (!repeatUntil || startDate <= repeatUntil) {
        const newEvent = {
          ...cleanFormData,
          user_id: user.id || null,
          user_email: user.email || null,
          start_date: toISODate(startDate),
          end_date: hasEndDate ? toISODate(endDate!) : null, // üëà –≤–æ—Ç —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ
          start_time: cleanFormData.start_time,
          end_time: cleanFormData.end_time,
          // created_at —É–±–µ—Ä–∏, –ø—É—Å—Ç—å –ë–î —Å—Ç–∞–≤–∏—Ç —Å–∞–º–∞
        };
        eventsToInsert.push(newEvent);

        if (repeatType === 'weekly') {
          startDate.setDate(startDate.getDate() + 7);
          if (hasEndDate) endDate!.setDate(endDate!.getDate() + 7);
        } else if (repeatType === 'monthly') {
          startDate.setMonth(startDate.getMonth() + 1);
          if (hasEndDate) endDate!.setMonth(endDate!.getMonth() + 1);
        } else {
          break; // –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞
        }
      }

      const { error: insertError } = await supabase.from('events').insert(eventsToInsert);
      error = insertError;
    }

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error.message);
      alert('–û—à–∏–±–∫–∞: ' + error.message);
    } else {
      // —Å–º. –ø—É–Ω–∫—Ç 2 ‚Äî —Ç—É—Ç –µ—â—ë –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –≥—É–≥–ª–∞
      reset({ start_time: '00:00', end_time: '23:59' });
      setEditingId(null);
      clearGoogleSearch();        // üëà –¥–æ–±–∞–≤–∏–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ
      fetchEvents(true);
      setSearch('');
    }
  };

  const onPlaceSelected = (place: google.maps.places.PlaceResult) => {
    const location = place.geometry?.location;
    if (location) {
      setValue('address', place.formatted_address || '');
      setValue('lat', location.lat());
      setValue('lng', location.lng());
    }
  };

  const deleteEvent = async (id: any) => {
    if (!id) {
      alert('–ù–µ—Ç ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }
    const { error } = await supabase.from('events').delete().eq('id', id);
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error.message);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' + error.message);
    } else {
      fetchEvents(true);
      setSearch('');
    }
  };

  const editEvent = (event: any) => {
    setEditingId(event.id);

    const keys = [
      'title', 'description', 'address', 'lat', 'lng', 'website',
      'type', 'start_date', 'start_time', 'end_date', 'end_time',
      'age_group', 'format', 'repeat', 'repeat_until',
      'description_en', 'description_de', 'description_fr',
      'description_it', 'description_ru'
    ] as const;

    keys.forEach((key) => {
      if ((key === 'type' || key === 'age_group') && Array.isArray(event[key])) {
        setValue(key, event[key]);
      } else {
        setValue(key, event[key] as any);
      }
    });
    setTimeout(() => {
      formRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }, 0);
  };

  const autoFillFromWebsite = async () => {
    const url = (watch('website') || '').trim();
    if (!url) {
      alert('–°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ ¬´–°–∞–π—Ç¬ª.');
      return;
    }
    try {
      setScraping(true);
      const res = await fetch('/api/scrape-event', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url }),
      });
      const json = await res.json();

      if (!res.ok || !json.ok) {
        throw new Error(json.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      }

      const d = json.data || {};

      // –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω–∞—à–ª–∏
      if (d.title) setValue('title', d.title);
      if (d.description) setValue('description', d.description);
      if (d.start_date) setValue('start_date', d.start_date);
      if (d.start_time) setValue('start_time', d.start_time);
      if (d.end_date) setValue('end_date', d.end_date);
      if (d.end_time) setValue('end_time', d.end_time);
      if (d.address) setValue('address', d.address);

      alert('–ì–æ—Ç–æ–≤–æ! –Ø –∑–∞–ø–æ–ª–Ω–∏–ª–∞ –ø–æ–ª—è. –ü—Ä–æ–≤–µ—Ä—å –∏ –¥–æ–ø–æ–ª–Ω–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.');
    } catch (e: any) {
      alert('–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: ' + e.message);
    } finally {
      setScraping(false);
    }
  };

  const [sortBy, setSortBy] = useState<'created_at' | 'start_date' | 'end_date' | 'title'>('created_at');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');

  const fetchEvents = async (reset = false) => {
    const from = reset ? 0 : firstLoadLimit + (page - 1) * loadMoreLimit;
    const to = from + (reset ? firstLoadLimit : loadMoreLimit) - 1;

    const { data, error } = await supabase
      .from('events')
      .select('*')
      .order(sortBy, { ascending: sortOrder === 'asc' })
      .range(from, to);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π:', error.message);
      return;
    }

    if (reset) {
      setEvents(data || []);
      setPage(1);
      setHasMore((data?.length || 0) === firstLoadLimit);
    } else {
      setEvents(prev => [...prev, ...(data || [])]);
      setPage(prev => prev + 1);
      if (!data || data.length < loadMoreLimit) setHasMore(false);
    }
  };

  const searchEvents = async (query: string) => {
    if (!query || query.trim() === '') {
      // –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –Ω—É–ª—è
      await fetchEvents(true);
      return;
    }

    setIsSearching(true);
    try {
      // –ò—â–µ–º –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—è–º: title, description, address, website
      // ILIKE = —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫. %‚Ä¶% ‚Äî –ø–æ–¥—Å—Ç—Ä–æ–∫–∞.
      const { data, error } = await supabase
        .from('events')
        .select('*')
        .or(
          [
            `title.ilike.%${query}%`,
            `description.ilike.%${query}%`,
            `address.ilike.%${query}%`,
            `website.ilike.%${query}%`,
          ].join(',')
        )
        .order(sortBy, { ascending: sortOrder === 'asc' })
        .limit(200); // —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å; –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error.message);
        return;
      }

      // –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
      setEvents(data || []);
      setHasMore(false); // –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" —Å–∫—Ä—ã–≤–∞–µ–º
      setPage(1);
    } finally {
      setIsSearching(false);
    }
  };

  const archiveEvents = async (dateString: string) => {
    if (!dateString) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É');
      return;
    }

    const { data: oldEvents, error } = await supabase
      .from('events')
      .select('*')
      .lte('end_date', dateString);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π:', error.message);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π');
      return;
    }

    if (!oldEvents || oldEvents.length === 0) {
      alert('–°–æ–±—ã—Ç–∏–π –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    const { error: insertError } = await supabase
      .from('old_events')
      .insert(oldEvents);

    if (insertError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ old_events:', insertError.message);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –≤ –∞—Ä—Ö–∏–≤');
      return;
    }

    const ids = oldEvents.map((e) => e.id);
    const { error: deleteError } = await supabase
      .from('events')
      .delete()
      .in('id', ids);

    if (deleteError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ events:', deleteError.message);
      alert('–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ (–Ω–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã)');
    } else {
      alert(`–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${oldEvents.length} —Å–æ–±—ã—Ç–∏–π`);
      fetchEvents(true); 
      setSearch('');
    }
  };

  const scrollToCard = (id: string) => {
    const el = document.getElementById(`event-${id}`);
    if (el) el.scrollIntoView({ behavior: 'smooth', block: 'start' });
  };

  const [pendingScrollId, setPendingScrollId] = useState<string | null>(null);

  const copyEvent = async (event: any) => {
    const { id, created_at, updated_at, ...rest } = event; 
    const newEvent = {
      ...rest,
      user_id: user?.id || null,
      start_date: rest.start_date || null,
      start_time: rest.start_time || null,
      end_time: rest.end_time || null,
      description_en: rest.description_en || null,
      description_de: rest.description_de || null,
      description_fr: rest.description_fr || null,
      description_it: rest.description_it || null,
      description_ru: rest.description_ru || null,
      age_group: rest.age_group || null,
      format: rest.format || null,
      type: rest.type || null,
      // created_at —É–±–∏—Ä–∞–µ–º ‚Äî –ø—É—Å—Ç—å –ë–î —Å—Ç–∞–≤–∏—Ç —Å–∞–º–∞
    };

    // üî¥ –í–ê–ñ–ù–û: –≤—Å—Ç–∞–≤–ª—è–µ–º –û–î–ò–ù –æ–±—ä–µ–∫—Ç (–±–µ–∑ –º–∞—Å—Å–∏–≤–∞) –∏ –ø—Ä–æ—Å–∏–º –≤–µ—Ä–Ω—É—Ç—å id
    const { data, error } = await supabase
      .from('events')
      .insert(newEvent)
      .select('id')    // –≤–µ—Ä–Ω–∏ id
      .single();       // –æ–¥–∏–Ω —Ä—è–¥

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: ' + error.message);
      return;
    }

    const newId = data?.id;
    // 1) –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å –Ω—É–ª—è, —á—Ç–æ–±—ã –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –±—ã–ª–∞ –≤ DOM
    await fetchEvents(true);

    // 2) –º–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã React —É—Å–ø–µ–ª –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏, –∏ –∫—Ä—É—Ç–∏–º—Å—è –∫ –Ω–æ–≤–æ–π
    if (newId) {
      setTimeout(() => scrollToCard(newId), 0);
    }
  };

  const clearGoogleSearch = () => {
    // –æ—á–∏—Å—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö—Ä–∞–Ω–∏–º –≤ —Ñ–æ—Ä–º–µ
    setValue('address', '');
    setValue('lat', undefined as any);
    setValue('lng', undefined as any);
    // –∏ –ø–µ—Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º —Å–∞–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π input —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º
    setGmapsResetKey((k) => k + 1);
  };

  const signOut = async () => {
    await supabase.auth.signOut();
    setUser(null);
  };

  useEffect(() => {
    const age = watch('age_group');
    if (Array.isArray(age) && age.includes('any')) {
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ 'any', —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í–°–ï –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      setValue('age_group', ageGroups);
    }
  }, [watch('age_group')]); 

  useEffect(() => {
  const t = setTimeout(() => {
    searchEvents(search.trim());
  }, 400); // –ø–æ–¥–æ–∂–¥—ë–º 0.4 —Å–µ–∫ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞

  return () => clearTimeout(t);
}, [search, sortBy, sortOrder]);

  useEffect(() => {
    const subscription = watch((value, { name }) => {
      if (name === 'start_date') {
        const newStartDate = value.start_date;
        const currentEndDate = value.end_date;
        if (!currentEndDate || currentEndDate === '') {
          setValue('end_date', newStartDate);
        }
      }
    });
    return () => subscription.unsubscribe();
  }, [watch]);

  useEffect(() => {
    fetchEvents(true); // –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  }, [sortBy, sortOrder]);

  useEffect(() => {
    fetchUser(); // üëà –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å, –∏–Ω–∞—á–µ user –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞ null
  }, []);

  if (!user) {
    return <AuthForm />;
  }

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-xl font-bold">Event Input Form</h1>
        <div className="flex items-center gap-2">
          <span className="text-sm text-gray-700">{user.email}</span>
          <button onClick={signOut} className="bg-gray-300 text-black px-3 py-1 rounded">
            –í—ã–π—Ç–∏
          </button>
        </div>
      </div>

      <div ref={formRef}>
        <form onSubmit={handleSubmit(onSubmit)} className="bg-white p-6 shadow rounded space-y-4">

          {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
          <div>
            <div className="flex items-center gap-2">
              <span>{getMarker(watch('title'))}</span>
              <textarea
                placeholder="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"
                {...register('title')}
                className="border border-gray-400 text-lg w-full px-4 resize overflow-auto h-16"
              />
            </div>
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª) */}
          <div className="mb-4">
            <div className="flex items-center gap-2">
              <span>{getMarker(watch('description'))}</span>
              <textarea
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª)"
                {...register('description')}
                className="border border-gray-400 h-40 text-base w-full max-w-full px-4 resize overflow-auto"
              />
            </div>
          </div>

          {/* –ê–¥—Ä–µ—Å –∏ Google Maps –ø–æ–∏—Å–∫ */}
          <div className="mb-4">
            <div className="flex items-center gap-2">
              <span>{getMarker(watch('address'))}</span>
              <textarea
                placeholder="–ê–¥—Ä–µ—Å (–≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∏–∑ Google)"
                {...register('address')}
                className="border border-gray-400 h-16 text-base w-full max-w-full px-4 resize overflow-auto"
              />
            </div>
            <GoogleMapsSearch key={gmapsResetKey} onPlaceSelected={onPlaceSelected} />
          </div>

          {/* —Å–∫—Ä—ã—Ç—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã */}
          <input type="hidden" {...register('lat')} />
          <input type="hidden" {...register('lng')} />

          {/* –í–µ–±—Å–∞–π—Ç + —Ç–∏–ø—ã */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-center gap-2">
              <span>{getMarker(watch('website'))}</span>
              <textarea
                placeholder="–°–∞–π—Ç"
                {...register('website')}
                className="border border-gray-400 h-16 text-base w-full px-4 resize overflow-auto"
              />
              <div className="mt-2 flex items-center gap-2">
                <button
                  type="button"
                  onClick={autoFillFromWebsite}
                  disabled={scraping}
                  className="bg-purple-600 text-white px-3 py-1 rounded disabled:opacity-60"
                >
                  {scraping ? '–ó–∞–ø–æ–ª–Ω—è—é‚Ä¶' : '–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å —Å–∞–π—Ç–∞'}
                </button>
                <span className="text-xs text-gray-500">
                  –ü–æ–º–æ—â–Ω–∏–∫: –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∞–π—Ç–∞—Ö
                </span>
              </div>
            </div>
            <div className="flex items-start gap-2">
              <span className="mt-1">{getMarker(watch('type') || [])}</span>
              <div className="flex flex-col space-y-2">
                {[0, 1, 2].map((rowIndex) => (
                  <div key={rowIndex} className="flex flex-wrap gap-4">
                    {eventType.slice(rowIndex * 9, (rowIndex + 1) * 9).map((option) => (
                      <label key={option} className="flex items-center gap-1 text-base text-gray-800">
                        <input
                          type="checkbox"
                          value={option}
                          {...register('type')}
                          className="form-checkbox"
                        />
                        <span>{option}</span>
                      </label>
                    ))}
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* –°—Ç–∞—Ä—Ç / –ö–æ–Ω–µ—Ü / –í–æ–∑—Ä–∞—Å—Ç / –§–æ—Ä–º–∞—Ç */}
          <div className="flex flex-wrap md:flex-nowrap items-start gap-4">

            <div className="flex items-center gap-2 shrink-0">
              <span>{getMarker(watch('start_date') && watch('start_time'))}</span>
              <input
                type="date"
                {...register('start_date')}
                className="border border-gray-400 rounded px-2 py-1 w-[9.5rem]"
              />
              <input
                type="time"
                {...register('start_time')}
                className="border border-gray-400 rounded px-2 py-1 w-[5.5rem]"
              />
            </div>

            <div className="flex items-center gap-2 shrink-0">
              <span>{getMarker(watch('end_date') && watch('end_time'))}</span>
              <input
                type="date"
                {...register('end_date')}
                className="border border-gray-400 rounded px-2 py-1 w-[9.5rem]"
              />
              <input
                type="time"
                {...register('end_time')}
                className="border border-gray-400 rounded px-2 py-1 w-[5.5rem]"
              />
            </div>

            <div className="flex items-center gap-2">
              <span>{getMarker(watch('age_group') || [])}</span>
              <div className="flex flex-wrap items-center gap-3">
                {ageGroups.map((option) => (
                  <label key={option} className="flex items-center gap-1">
                    <input
                      type="checkbox"
                      value={option}
                      {...register('age_group')}
                      className="form-checkbox"
                    />
                    <span className="font-medium text-gray-800">{option}</span>
                  </label>
                ))}
              </div>
            </div>

            <div className="flex items-center gap-2 shrink-0">
              <span>{getMarker(watch('format'))}</span>
              <select
                {...register('format')}
                className="border border-gray-400 rounded px-2 py-1 w-40"
              >
                <option value="">–§–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏—è</option>
                {formats.map(option => (
                  <option key={option} value={option}>{option}</option>
                ))}
              </select>
            </div>
          </div>

          {/* –ü–æ–≤—Ç–æ—Ä */}
          <div className="grid grid-cols-2 gap-4">
            <select {...register('repeat')} className="border border-gray-400 rounded px-2 py-1 w-full">
              <option value="">–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞</option>
              <option value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</option>
              <option value="monthly">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</option>
            </select>
            <input type="date" {...register('repeat_until')} className="border border-gray-400 rounded px-2 py-1 w-full" />
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —è–∑—ã–∫–∞—Ö */}
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            <textarea placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (en)" {...register('description_en')} className="border border-gray-400 h-24 text-sm w-full max-w-full px-4 resize overflow-auto" />
            <textarea placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (de)" {...register('description_de')} className="border border-gray-400 h-24 text-sm w-full max-w-full px-4 resize overflow-auto" />
            <textarea placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (fr)" {...register('description_fr')} className="border border-gray-400 h-24 text-sm w-full max-w-full px-4 resize overflow-auto" />
            <textarea placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (it)" {...register('description_it')} className="border border-gray-400 h-24 text-sm w-full max-w-full px-4 resize overflow-auto" />
            <textarea placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (ru)" {...register('description_ru')} className="border border-gray-400 h-24 text-sm w-full max-w-full px-4 resize overflow-auto" />
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex gap-4">
            <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded">
              {editingId ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
            </button>
            {editingId && (
              <button
                type="button"
                onClick={() => {
                  reset();
                  setEditingId(null);
                }}
                className="bg-gray-400 text-white px-4 py-2 rounded"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            )}

            <button
              type="button"
              className="bg-yellow-500 text-white px-4 py-2 rounded"
              onClick={() => setArchiveOpen(true)}
            >
              –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
            </button>

            {archiveOpen && (
              <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
                <div className="bg-white p-6 rounded shadow-lg space-y-4 w-[300px]">
                  <h2 className="text-lg font-semibold">–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è</h2>
                  <input
                    type="date"
                    value={archiveDate}
                    onChange={(e) => setArchiveDate(e.target.value)}
                    className="border border-gray-400 px-2 py-1 w-full"
                  />
                  <div className="flex justify-between gap-2">
                    <button
                      onClick={() => setArchiveOpen(false)}
                      className="bg-gray-300 text-black px-3 py-1 rounded"
                    >
                      –û—Ç–º–µ–Ω–∞
                    </button>
                    <button
                      className="px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600"
                      onClick={() => setArchiveOpen(true)}
                    >
                      –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </form>
      </div>
      <ArchiveDialog
        isOpen={archiveOpen}
        onClose={() => setArchiveOpen(false)}
        fetchEvents={fetchEvents}
      />

      <div className="flex items-center gap-4">
        <label className="font-semibold text-gray-800">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:</label>
        <select
          value={sortBy}
          onChange={(e) => setSortBy(e.target.value as any)}
          className="input"
        >
          <option value="created_at">–î–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</option>
          <option value="start_date">–î–∞—Ç–µ –Ω–∞—á–∞–ª–∞</option>
          <option value="end_date">–î–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è</option>
          <option value="title">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é</option>
        </select>

        <select
          value={sortOrder}
          onChange={(e) => setSortOrder(e.target.value as 'asc' | 'desc')}
          className="input"
        >
          <option value="asc">‚Üë –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</option>
          <option value="desc">‚Üì –ü–æ —É–±—ã–≤–∞–Ω–∏—é</option>
        </select>
      </div>

      <div className="flex gap-2 items-center">
        <input
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é, –∞–¥—Ä–µ—Å—É, —Å–∞–π—Ç—É..."
          className="border border-gray-400 rounded px-3 py-2 w-full max-w-xl"
        />
        <button
          type="button"
          onClick={() => setSearch('')}
          className="px-3 py-2 bg-gray-200 rounded"
        >
          –°–±—Ä–æ—Å
        </button>
        {isSearching && <span className="text-sm text-gray-600">–ò—â—É‚Ä¶</span>}
      </div>

      <hr className="mt-4 border-black" />
      <div className="space-y-2">
        {events.map(event => (
          <div key={event.id}
            id={`event-${event.id}`}  className="bg-white p-4 shadow rounded border border-gray-200 space-y-1">
            <div className="font-bold text-black text-base">{event.title}</div>
            <div className="text-sm text-gray-600">
              {formatDate(event.start_date)} {event.start_time?.slice(0, 5)}
              {event.end_date ? (
                <> ‚Äî {formatDate(event.end_date)} {event.end_time?.slice(0, 5)}</>
              ) : null}
            </div>
            <div className="text-sm text-blue-700 underline">{event.website}</div>
            <div className="flex gap-4 mt-2">
              <button onClick={() => deleteEvent(event.id)} className="text-red-500">
                –£–¥–∞–ª–∏—Ç—å
              </button>
              <button onClick={() => editEvent(event)} className="text-blue-500">
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
              <button onClick={() => copyEvent(event)} className="text-green-500">
                –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
            <hr className="mt-4 border-black" />
          </div>
        ))}
        {hasMore && (
          <div className="text-center mt-4">
            <button
              onClick={() => fetchEvents()}
              className="bg-gray-200 hover:bg-gray-300 text-black px-4 py-2 rounded"
            >
              –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
